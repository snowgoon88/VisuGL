 * Dependance
** OpenGL
** GLFW - Window with OpenGL
** FTGL - Draw text with OpenGL and FreeType2
** GSL - Gnu Scientific Library
** BOOST - Boost::program_options
* DONE [2/2] Fenêtre GLFW version 3 
** DONE CMake pour GLFW
** DONE C++ pour GLFW
* [5/6] Afficher Graphe
** TODO Afficher Grille
** DONE [4/4] Afficher Axes avec ticks et range
*** DONE Label
 => Attention, le fait de scaler par rapport au glOrtho fait que les lettres ne sont pas jolie.
*** DONE Major Ticks
*** DONE Minor Ticks
*** DONE Ticks Label
** DONE Afficher text avec FTGL
 =>  FTGLTextureFont
** DONE Taille du texte en fonction de la taille de la fenêtre (ratio).
** DONE Position du texte en fonction de la taille de la fenètre (ratio)
** DONE Afficher Courbe

* DONE [1/1] Constructeurs, Copy, Move
** DONE tester Copy pour Layer
* TODO Rec-SOM
* [/] Data
** DONE McKey-Glass
*** DONE Serialiser avec gaml::make-output_iterator ?
=> son propre reader/writer
* TODO [3/4] Reservoir Computing
** DONE Serialiser
** DONE Learn
Mise en place de Ridge Regression
** DONE [2/4] Reservoir
*** DONE GSL => valeurs propres complexes
Comment c'est fait dans Matlab : Magnitude du complexe
*** DONE Copie de la matrice avant les calculs
*** TODO C++ Matrix
BLAZE : https://code.google.com/p/blaze-lib/
Eigen
*** TODO Iterator ??
http://stackoverflow.com/questions/7758580/writing-your-own-stl-container/7759622#7759622

** TODO Cherche le meilleur Ridge Coef
* TODO Data en séquence
* [1/1] XP
* TODO [7/10] XP POMDP 
J'ai l'impression qu'essayer d'apprendre les transitions ne marche que dans des cas quasi déterministes, non? Dans ce cas, faudrait plutôt essayer de voir si on peut pas apprendre V(s) ou V(o) ??
** DONE ajout d'un jsonreader pour transition
** DONE Générer et sauvegarder une trajectoire de transitions
** DONE Cheese maze labyrinthe
Voir début danns xp/xp-002-cheese-maze
** DONE Memory Leak
** DONE Sauvegarder les résultats
** DONE pour apprendre il faut traj+pomdp (nb obs, etc)
** DONE [4/4] Comprendre le format de fichier de sortie -> R
*** GEN pomdp cheese
wbuild/xp/xp-002-cheese -p 0.9 -l 1 -f cheese_maze_0.9_1
*** GEN trajectoire
wbuild/xp/xp-001-pomdp -p data_xp/cheese_maze_0.9_1.json --gene_traj data_xp/traj_1000 --traj_length 1000
*** GEN esn
wbuild/xp/xp-001-pomdp -p data_xp/cheese_maze_0.9_1.json --gene_esn esn_50_1_0.99_0.1 --res_size 50
*** GEN noise
wbuild/xp/xp-001-pomdp -p data_xp/cheese_maze_0.9_1.json --gene_noise noise_1000_0.1 --length_noise 1000
*** DONE LEARN
*** DONE LEARN Paremeters
wbuild/xp/xp-001-pomdp -p data_xp/cheese_maze_0.9_1.json -t data_xp/traj_1000.data -e data_xp/esn_50_1_0.99_0.1.json --regul 10.0 -o data_xp/result_10.data
*** DONE LEARN results with comment and header
*** DONE [Q] : biais dans réservoir ? => OUI
d'après [Lukosevicius12]
** TODO Scripts pour tester influence des paramètres
*** DONE Reprendre script python
**** subprocess.Popen 
avec Popen.poll() et Popen.wait()
*** DONE taille Res
*** DONE Leaking rate
*** DONE regul
*** noise
*** noise length
*** DONE traj size

** TODO [0/4] apprendre (0+A) -> .
*** TODO pour apprendre, il faut transition ->O
*** TODO pour apprendre, il faut transition ->S (pour voir)
*** TODO pour apprendre, il faut transition ->V(S) (pour voir)
*** TODO pour apprendre, il faut tansition ->V(O) (pour voir)
** TODO [0/3] apprendre A x (O -> .) 
*** TODO pour apprendre, il faut transition ->O
*** TODO pour apprendre, il faut transition ->S (pour voir)
*** TODO pour apprendre, il faut transition ->V(S) (pour voir)
* [0/1] Utils
** TODO Un seul namespace dans utils, la différence se fera par l'objet que l'on veut striser
* [3/3] Check Ridge Regression
https://onlinecourses.science.psu.edu/stat857/node/155
http://www.astrostatistics.psu.edu/su07/R/html/MASS/html/lm.ridge.html
** DONE RidgeReg with GIVEN regul param
** DONE Compare with R
** DONE Ne pas accorder de pénalité pour le poids associé à 'intercept' dans RR
